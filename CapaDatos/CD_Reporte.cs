using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


using CapaEntidad;
using OfficeOpenXml;
using System.Data.SqlClient;

using System.Data;
using System.Globalization;
using System.Runtime.InteropServices.ComTypes;
using OfficeOpenXml.Drawing;
using System.Drawing;
using System.IO;
using static System.Net.Mime.MediaTypeNames;
using System.Web;

namespace CapaDatos
{
    public class CD_Reporte
    {

        public List<Reporte> Ventas(string fechainicio, string fechafin, string idtransaccion)
        {

            List<Reporte> lista = new List<Reporte>();

            try
            {
                using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
                {


                    SqlCommand cmd = new SqlCommand("sp_ReporteVentas", oconexion);
                    cmd.Parameters.AddWithValue("fechainicio", fechainicio);
                    cmd.Parameters.AddWithValue("fechafin", fechafin);
                    cmd.Parameters.AddWithValue("idtransaccion", idtransaccion);
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconexion.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {

                            lista.Add(
                                new Reporte()
                                {
                                    FechaVenta = dr["FechaVenta"].ToString(),
                                    Cliente = dr["Cliente"].ToString(),
                                    Producto = dr["Producto"].ToString(),
                                    Precio = Convert.ToDecimal(dr["Precio"], new CultureInfo("es-PE")),
                                    Cantidad = Convert.ToInt32(dr["Cantidad"].ToString()),
                                    Total = Convert.ToDecimal(dr["Total"], new CultureInfo("es-PE")),
                                    IdTransaccion = dr["IdTransaccion"].ToString()
                                });
                        }
                    }
                }

            }
            catch
            {
                lista = new List<Reporte>();

            }


            return lista;


        }

        public byte[] GenerarInformeUsuariosExcel()
        {

            string query = "SELECT Nombres, Apellidos, Correo, Activo, FechaRegistro FROM USUARIO ORDER BY CONVERT(DATE, FechaRegistro, 105) DESC";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de usuarioss");
                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = HttpContext.Current.User.Identity.Name;

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";
                        // Escribir encabezados de columnas
                        worksheet.Cells[contentStartRow, contentStartColumn].Value = "Nombres";
                        worksheet.Cells[contentStartRow, contentStartColumn + 1].Value = "Apellidos";
                        worksheet.Cells[contentStartRow, contentStartColumn + 2].Value = "Correo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 3].Value = "Activo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 4].Value = "Fecha de registro";
                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn].Value = dataTable.Rows[row]["Nombres"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 1].Value = dataTable.Rows[row]["Apellidos"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 2].Value = dataTable.Rows[row]["Correo"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 3].Value = dataTable.Rows[row]["Activo"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 4].Value = dataTable.Rows[row]["FechaRegistro"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public byte[] GenerarInformeClientesExcel()
        {

            string query = "SELECT Nombres, Apellidos, Correo, FechaRegistro FROM CLIENTE ORDER BY CONVERT(DATE, FechaRegistro, 105) DESC";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de clientes");
                        // Add logo to the header

                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = HttpContext.Current.User.Identity.Name;

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";

                        // Escribir encabezados de columnas
                        worksheet.Cells[contentStartRow, contentStartColumn].Value = "Nombres";
                        worksheet.Cells[contentStartRow, contentStartColumn + 1].Value = "Apellidos";
                        worksheet.Cells[contentStartRow, contentStartColumn + 2].Value = "Correo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 3].Value = "Fecha de registro";

                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn].Value = dataTable.Rows[row]["Nombres"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 1].Value = dataTable.Rows[row]["Apellidos"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 2].Value = dataTable.Rows[row]["Correo"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 3].Value = dataTable.Rows[row]["FechaRegistro"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public byte[] GenerarInformeCategoriasExcel()
        {

            string query = "SELECT Descripcion, Activo, FechaRegistro FROM CATEGORIA ORDER BY CONVERT(DATE, FechaRegistro, 105) DESC";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de categoria");
                        // Add logo to the header

                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = HttpContext.Current.User.Identity.Name;

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";

                        worksheet.Cells[contentStartRow, contentStartColumn].Value = "Descripcion";
                        worksheet.Cells[contentStartRow, contentStartColumn + 1].Value = "Activo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 2].Value = "Fecha de registro";
                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn].Value = dataTable.Rows[row]["Descripcion"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 1].Value = dataTable.Rows[row]["Activo"].ToString();

                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 2].Value = dataTable.Rows[row]["FechaRegistro"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public byte[] GenerarInformeMarcasExcel()
        {

            string query = "SELECT Descripcion, Activo, FechaRegistro FROM MARCA ORDER BY CONVERT(DATE, FechaRegistro, 105) DESC";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de marca");
                        // Add logo to the header

                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = HttpContext.Current.User.Identity.Name;

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";
                        // Escribir encabezados de columnas
                        worksheet.Cells[contentStartRow, contentStartColumn].Value = "Descripcion";
                        worksheet.Cells[contentStartRow, contentStartColumn + 1].Value = "Activo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 2].Value = "Fecha de registro";
                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn].Value = dataTable.Rows[row]["Descripcion"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 1].Value = dataTable.Rows[row]["Activo"].ToString();

                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 2].Value = dataTable.Rows[row]["FechaRegistro"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public byte[] GenerarInformeProductosExcel()
        {

            string query = "SELECT p.Nombre, p.Descripcion,m.Descripcion as Descripcion2,c.Descripcion as Descripcion3,p.Stock,p.Activo,p.FechaRegistro FROM PRODUCTO as p, MARCA as m, CATEGORIA as c where p.idMarca=m.IdMarca and p.IdCategoria=c.IdCategoria ORDER BY CONVERT(DATE, p.FechaRegistro, 105) DESC";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de productos");
                        // Add logo to the header

                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = HttpContext.Current.User.Identity.Name; // Replace with the actual username

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";
                        // Escribir encabezados de columnas
                        worksheet.Cells[contentStartRow, contentStartColumn].Value = "Nombre";
                        worksheet.Cells[contentStartRow, contentStartColumn + 1].Value = "Descripcion";
                        worksheet.Cells[contentStartRow, contentStartColumn + 2].Value = "Marca";
                        worksheet.Cells[contentStartRow, contentStartColumn + 3].Value = "Categoria";
                        worksheet.Cells[contentStartRow, contentStartColumn + 4].Value = "Stock";
                        worksheet.Cells[contentStartRow, contentStartColumn + 5].Value = "Activo";
                        worksheet.Cells[contentStartRow, contentStartColumn + 6].Value = "Fecha de registro";
                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn].Value = dataTable.Rows[row]["Nombre"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 1].Value = dataTable.Rows[row]["Descripcion"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 2].Value = dataTable.Rows[row]["Descripcion2"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 3].Value = dataTable.Rows[row]["Descripcion3"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 4].Value = dataTable.Rows[row]["Stock"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 5].Value = dataTable.Rows[row]["Activo"].ToString();
                            worksheet.Cells[row + contentStartRow + 1, contentStartColumn + 6].Value = dataTable.Rows[row]["FechaRegistro"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public byte[] GenerarInformeComprasExcel()
        {

            string query = @"SELECT  p.Nombre AS NomProduct, c.precioCompra
            , u.Nombres AS NomUser, u.Apellidos AS ApeUser,
            c.cantidad
            FROM Compra c
            INNER JOIN PRODUCTO p ON p.IdProducto = c.idProducto
            INNER JOIN USUARIO u ON u.IdUsuario = c.idEmpleado";

            using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
            {
                using (SqlCommand command = new SqlCommand(query, oconexion))
                {
                    oconexion.Open();
                    DataTable dataTable = new DataTable();
                    dataTable.Load(command.ExecuteReader());
                    ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                    using (ExcelPackage package = new ExcelPackage())
                    {
                        ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("Reporte de compras");
                        /// Add logo to the header

                        var imagePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Content", "images", "FerrelandLogoSFondo.png");

                        // Insertar el logo en la cabecera
                        var logo = worksheet.Drawings.AddPicture("Logo", new FileInfo(imagePath));

                        // Position the logo in the worksheet
                        logo.SetPosition(0, 300);
                        logo.SetSize(100, 100);

                        // Get current date and user information
                        DateTime currentDate = DateTime.Now;
                        string username = "John Doe"; // Replace with the actual username

                        // Set the position of the content after the logo
                        int contentStartRow = 3; // Adjust this value based on the space needed for the logo
                        int contentStartColumn = 1;

                        // Write the current date and user information to the header
                        worksheet.Cells[1, contentStartColumn].Value = $"Report generated on: {currentDate.ToString("dd/MM/yyyy")}";
                        worksheet.Cells[2, contentStartColumn].Value = $"Generated by: {username}";
                        // Escribir encabezados de columnas
                        worksheet.Cells[1, 1].Value = "Producto";
                        worksheet.Cells[1, 2].Value = "Precio de compra";
                        worksheet.Cells[1, 3].Value = "Nombre comprador";
                        worksheet.Cells[1, 4].Value = "Apellido comprador";
                        worksheet.Cells[1, 5].Value = "Cantidad";
                        // Escribir datos de la tabla
                        for (int row = 0; row < dataTable.Rows.Count; row++)
                        {
                            worksheet.Cells[row + 2, 1].Value = dataTable.Rows[row]["NomProduct"].ToString();
                            worksheet.Cells[row + 2, 2].Value = dataTable.Rows[row]["precioCompra"].ToString();
                            worksheet.Cells[row + 2, 3].Value = dataTable.Rows[row]["NomUser"].ToString();
                            worksheet.Cells[row + 2, 4].Value = dataTable.Rows[row]["ApeUser"].ToString();
                            worksheet.Cells[row + 2, 5].Value = dataTable.Rows[row]["cantidad"].ToString();
                        }

                        // Autoajustar el ancho de las columnas
                        worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                        // Convertir el paquete Excel a una secuencia de bytes
                        return package.GetAsByteArray();
                    }
                }
            }
        }

        public DashBoard VerDashBoard()
        {

            DashBoard objeto = new DashBoard();

            try
            {
                using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
                {

                    SqlCommand cmd = new SqlCommand("sp_ReporteDashboard", oconexion);
                    cmd.CommandType = CommandType.StoredProcedure;

                    oconexion.Open();

                    using (SqlDataReader dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {

                            objeto = new DashBoard()
                            {
                                TotalCliente = Convert.ToInt32(dr["TotalCliente"]),
                                TotalVenta = Convert.ToInt32(dr["TotalVenta"]),
                                TotalProducto = Convert.ToInt32(dr["TotalProducto"]),

                            };
                        }
                    }
                }

            }
            catch
            {
                objeto = new DashBoard();

            }


            return objeto;


        }

        //public List<Top5Productos> ObtenerTopProductos()
        //{
        //    List<Top5Productos> topProductos = new List<Top5Productos>();

        //    using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
        //    {
        //        oconexion.Open();
        //        using (var command = new SqlCommand())
        //        {
        //            SqlDataReader reader;
        //            command.Connection = oconexion;
        //            // Obtener los 5 productos principales
        //            command.CommandText = @"select top 5 P.Nombre, sum(DETALLE_VENTA.Cantidad) as Q
        //                            from DETALLE_VENTA
        //                            inner join PRODUCTO P on P.IdProducto = DETALLE_VENTA.IdProducto
        //                            inner join VENTA V on V.IdVenta = DETALLE_VENTA.IdVenta
        //                            group by P.Nombre
        //                            order by Q desc";

        //            reader = command.ExecuteReader();

        //            while (reader.Read())
        //            {
        //                topProductos.Add(new Top5Productos
        //                {
        //                    Nombres = reader[0].ToString(),
        //                    Cantidad = (int)reader[1]
        //                });
        //            }

        //            reader.Close();
        //        }
        //    }

        //    return topProductos;
        //}
        public List<Top5Productos> ObtenerTopProductos()
        {
            List<Top5Productos> topProductos = new List<Top5Productos>();

            try
            {
                using (SqlConnection oconexion = new SqlConnection(Conexion.cn))
                {
                    oconexion.Open();
                    using (SqlCommand command = new SqlCommand())
                    {
                        command.Connection = oconexion;
                        command.CommandText = @"SELECT TOP 5 P.Nombre, SUM(DETALLE_VENTA.Cantidad) AS Q
                                    FROM DETALLE_VENTA
                                    INNER JOIN PRODUCTO P ON P.IdProducto = DETALLE_VENTA.IdProducto
                                    INNER JOIN VENTA V ON V.IdVenta = DETALLE_VENTA.IdVenta
                                    GROUP BY P.Nombre
                                    ORDER BY Q DESC";

                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                Top5Productos producto = new Top5Productos
                                {
                                    Nombres = reader.GetString(0),
                                    Cantidad = reader.GetInt32(1)
                                };

                                topProductos.Add(producto);
                            }
                        }
                    }
                }
            }
            catch
            {
                topProductos = new List<Top5Productos>();
            }

            return topProductos;
        }

        public decimal Indicador(string fechainicio, string fechafin)
        {
            // Obtener la fecha actual y la fecha hace X días
            DateTime fechaActual = DateTime.Parse(fechafin);
            DateTime fechaAnterior = DateTime.Parse(fechainicio);



            // Consulta SQL para obtener el total de ganancias en el periodo especificado
            string query = $@"
                    SELECT 
                        SUM(MontoTotal) AS Ganancias
                    FROM 
                        VENTA
                    WHERE 
                        FechaVenta >= @FechaAnterior AND FechaVenta <= @FechaActual";



            // Variables para almacenar los resultados
            decimal gananciasActual = 0;



            using (SqlConnection connection = new SqlConnection(Conexion.cn))
            {
                connection.Open();



                // Obtener ganancias del periodo actual
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@FechaAnterior", fechaAnterior);
                command.Parameters.AddWithValue("@FechaActual", fechaActual);
                SqlDataReader reader = command.ExecuteReader();



                if (reader.Read())
                {
                    if (!reader.IsDBNull(0))
                    {
                        gananciasActual = reader.GetDecimal(0);
                    }
                }
                reader.Close();
            }
            return gananciasActual;
        }
    }
}
